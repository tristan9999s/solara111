"getgenv().Howl = {\r\n    Aimbot = {\r\n        Keybind = Enum.KeyCode.Q,\r\n        AimBotSkid = 0.187,\r\n        Prediction = 0.1247724521,\r\n\r\n        ShakeEnabled = false,\r\n        Shake = 0,\r\n        \r\n        Amount = 0.160145,\r\n        Style = \"Back\",\r\n        Direction = \"Inout\",\r\n\r\n        TargetPart = \"HumanoidRootPart\",\r\n    \r\n    },\r\n    ['HitBox'] = {\r\n        Part = \"HumanoidRootPart\",\r\n    },\r\n    ['Resolver'] = {\r\n        Enabled = true,\r\n    },\r\n    ['Silent'] = {\r\n        Prediction = 0.116,\r\n        Detection = {Close = 27, Mid = 38, Far = math.huge},\r\n    },\r\n    ['SpecificDis'] = {\r\n        Enabled = true,\r\n        Prediction = {\r\n            Close = 0.116243115666,\r\n            Mid = 0.1188237,\r\n            Far = 0.1224451,\r\n        },\r\n    },\r\n    ['OffSets'] = {\r\n        Jump = {Amount = 0.90},\r\n        Fall = {Amount = -1.50},\r\n    },  \r\n    ['FieldOfView'] = {\r\n        Enabled = false,\r\n        Size = 240,\r\n        Color = Color3.fromRGB(255, 255, 255),\r\n        Transparency = 1,\r\n        Filled = false,\r\n    },\r\n    ['Air'] = {\r\n        Enabled = true,\r\n        AirPart = \"Lower Torso\",\r\n    },\r\n    ['Checks'] = {\r\n        TargetDeath = true,\r\n        PlayerDeath = true,\r\n        PlayerDeath = true,\r\n    },\r\n    \r\n    ['Macro'] = {\r\n        Enabled = false,\r\n        Keybind = \"x\",\r\n        Speed = 0.1000,\r\n        Type = \"Third\", -- \"First\", \"Third\"\r\n    },\r\n    \r\n    ['Spin'] = {\r\n        Enabled = true,\r\n        SpinSpeed = 4900,\r\n        Degrees = 360,\r\n        Keybind = Enum.KeyCode.V,\r\n    },\r\n}\r\n\r\n\r\n\r\nif (not getgenv().Loaded) then\r\nlocal userInputService = game:GetService(\"UserInputService\")\r\n\r\nlocal function CheckAnti(Plr) -- // Anti-aim detection\r\n    if Plr.Character.HumanoidRootPart.Velocity.Y \u003C -70 then\r\n        return true\r\n    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.X > 450 or Plr.Character.HumanoidRootPart.Velocity.X \u003C -35) then\r\n        return true\r\n    elseif Plr and Plr.Character.HumanoidRootPart.Velocity.Y > 60 then\r\n        return true\r\n    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.Z > 35 or Plr.Character.HumanoidRootPart.Velocity.Z \u003C -35) then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend\r\n\r\nlocal function getnamecall()\r\n     if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then \r\n        return \"UpdateMousePosI\"\r\n    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then\r\n        return \"MousePos\"\r\n    elseif game.PlaceId == 9825515356 then\r\n        return \"GetMousePos\"\r\n    end\r\nend\r\n\r\nfunction MainEventLocate()\r\n    for _,v in pairs(game:GetService(\"ReplicatedStorage\"):GetDescendants()) do\r\n        if v.Name == \"MainEvent\" then\r\n            return v\r\n        end\r\n    end\r\nend\r\n\r\nlocal Locking = false\r\nlocal Players = game:GetService(\"Players\")\r\nlocal Client = Players.LocalPlayer\r\nlocal Plr = nil -- Initialize Plr here\r\n\r\n-- 360 on bind\r\nlocal UserInputService = game:GetService(\"UserInputService\")\r\nlocal RunService = game:GetService(\"RunService\")\r\nlocal Camera = workspace.CurrentCamera\r\nlocal Toggle = false -- Initialize Toggle to false\r\n\r\nlocal function OnKeyPress(Input, GameProcessedEvent)\r\n    if Input.KeyCode == getgenv().Howl.Aimbot.Keybind and not GameProcessedEvent then \r\n        Toggle = not Toggle\r\n    elseif Input.KeyCode == getgenv().Howl.Macro.SpeedGlitchKey then\r\n        if getgenv().Howl.Macro.Enabled then \r\n            getgenv().Howl.Macro.SpeedGlitch = not getgenv().Howl.Macro.SpeedGlitch\r\n            if getgenv().Howl.Macro.SpeedGlitch then\r\n                repeat\r\n                    game:GetService(\"RunService\").Heartbeat:Wait()\r\n                    keypress(0x49)\r\n                    game:GetService(\"RunService\").Heartbeat:Wait()\r\n                    keypress(0x4F)\r\n                    game:GetService(\"RunService\").Heartbeat:Wait()\r\n                    keyrelease(0x49)\r\n                    game:GetService(\"RunService\").Heartbeat:Wait()\r\n                    keyrelease(0x4F)\r\n                    game:GetService(\"RunService\").Heartbeat:Wait()\r\n                until not getgenv().Howl.Macro.SpeedGlitch\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nUserInputService.InputBegan:Connect(OnKeyPress)\r\n\r\nUserInputService.InputBegan:Connect(function(keygo, ok)\r\n    if (not ok) then\r\n        if (keygo.KeyCode == getgenv().Howl.Aimbot.Keybind) then\r\n            Locking = not Locking\r\n            if Locking then\r\n                Plr = getClosestPlayerToCursor()\r\n            elseif not Locking then\r\n                if Plr then\r\n                    Plr = nil\r\n                end\r\n            end\r\n        end\r\n    end\r\nend)\r\n\r\nfunction getClosestPlayerToCursor()\r\n    local closestDist = math.huge\r\n    local closestPlr = nil\r\n    for _, v in ipairs(Players:GetPlayers()) do\r\n        if v ~= Client and v.Character and v.Character:FindFirstChild(\"Humanoid\") and v.Character.Humanoid.Health > 0 then\r\n            local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)\r\n            if cameraVisible then\r\n                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude\r\n                if distToMouse \u003C closestDist then\r\n                    closestPlr = v\r\n                    closestDist = distToMouse\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return closestPlr\r\nend\r\n\r\nfunction getClosestPartToCursor(Player)\r\n    local closestPart, closestDist = nil, math.huge\r\n    if Player.Character and Player.Character:FindFirstChild(\"Humanoid\") and Player.Character:FindFirstChild(\"Head\") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild(\"HumanoidRootPart\") then\r\n        for i, part in pairs(Player.Character:GetChildren()) do\r\n            if part:IsA(\"BasePart\") then\r\n                local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(part.Position)\r\n                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude\r\n                if distToMouse \u003C closestDist and table.find(getgenv().Howl.Aimbot.MultipleTargetPart, part.Name) then\r\n                    closestPart = part\r\n                    closestDist = distToMouse\r\n                end\r\n            end\r\n        end\r\n        return closestPart\r\n    end\r\nend\r\n\r\ngame:GetService(\"RunService\").RenderStepped:Connect(function()\r\n    if Plr and Plr.Character then\r\n        if getgenv().Howl.Aimbot.NearestPart == true and getgenv().Howl.Aimbot.Basic == false then\r\n            getgenv().Howl.Aimbot.TargetPart = tostring(getClosestPartToCursor(Plr))\r\n        elseif getgenv().Howl.Aimbot.Basic == true and getgenv().Howl.Aimbot.NearestPart == false then\r\n            getgenv().Howl.Aimbot.TargetPart = getgenv().Howl.Aimbot.TargetPart\r\n        end\r\n    end\r\nend)\r\n\r\nlocal function getVelocity(Player)\r\n    local Old = Player.Character.HumanoidRootPart.Position\r\n    wait(0.145)\r\n    local Current = Player.Character.HumanoidRootPart.Position\r\n    return (Current - Old) / 0.145\r\nend\r\n\r\nlocal function GetShakedVector3(Setting)\r\n    return Vector3.new(math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9)) / 1e9;\r\nend\r\n\r\nlocal v = nil\r\ngame:GetService(\"RunService\").Heartbeat:Connect(function(deltaTime)\r\n    if Plr ~= nil and Plr.Character and Plr.Character:FindFirstChild(\"HumanoidRootPart\") then\r\n        v = getVelocity(Plr)\r\n    end\r\nend)\r\n\r\nlocal mainevent = game:GetService(\"ReplicatedStorage\").MainEvent\r\n\r\nClient.Character.ChildAdded:Connect(function(child)\r\n    if child:IsA(\"Tool\") and child:FindFirstChild(\"MaxAmmo\") then\r\n        child.Activated:Connect(function()\r\n            if Plr and Plr.Character then\r\n                local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position\r\n                if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then \r\n                    mainevent:FireServer(\"UpdateMousePosI\", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.Prediction))\r\n                else\r\n                    mainevent:FireServer(\"UpdateMousePos\", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.Prediction))\r\n                end\r\n            end\r\n        end)\r\n    end\r\nend)\r\n\r\nClient.CharacterAdded:Connect(function(character)\r\n    character.ChildAdded:Connect(function(child)\r\n        if child:IsA(\"Tool\") and child:FindFirstChild(\"MaxAmmo\") then\r\n            child.Activated:Connect(function()\r\n                if Plr and Plr.Character then\r\n                    local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position\r\n                    if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then \r\n                        mainevent:FireServer(\"UpdateMousePosI\", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.Prediction))\r\n                    else\r\n                        mainevent:FireServer(\"UpdateMousePos\", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.Prediction))\r\n                    end\r\n                end\r\n            end)\r\n        end\r\n    end)\r\nend)\r\n\r\ngame:GetService(\"RunService\").RenderStepped:Connect(function()\r\n    if Plr ~= nil and Plr.Character then\r\n        local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position\r\n        if not CheckAnti(Plr) then\r\n            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Howl.Aimbot.Shake))\r\n            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Howl.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)\r\n        else\r\n            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Howl.Aimbot.CameraShake))\r\n            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Howl.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)\r\n        end\r\n    end\r\n    if getgenv().Howl.Checks.PlayerDeath == true and Plr and Plr.Character then\r\n        local KOd = Plr.Character:WaitForChild(\"BodyEffects\")[\"K.O\"].Value\r\n        local Grabbed = Plr.Character:FindFirstChild(\"GRABBING_CONSTRAINT\") ~= nil\r\n        if Plr.Character.Humanoid.Health \u003C 1 or KOd or Grabbed then\r\n            if Locking == true then\r\n                Plr = nil\r\n                Locking = false\r\n            end\r\n        end\r\n    end\r\n    if getgenv().Howl.Checks.TargetDeath == true and Plr and Plr.Character:FindFirstChild(\"Humanoid\") then\r\n        if Plr.Character.Humanoid.health \u003C 1 then\r\n            if Locking == true then\r\n                Plr = nil\r\n                Locking = false\r\n            end\r\n        end\r\n    end\r\n    if getgenv().Howl.Checks.PlayerDeath  == true and Client.Character and Client.Character:FindFirstChild(\"Humanoid\") and Client.Character.Humanoid.health \u003C 1 then\r\n        if Locking == true then\r\n            Plr = nil\r\n            Locking = false\r\n        end\r\n    end\r\n    if getgenv().Howl.Safety.AntiGroundShots == true and Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then\r\n        pcall(function()\r\n            local TargetVelv5 = Plr.Character.HumanoidRootPart\r\n    TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36),\r\n     TargetVelv5.Velocity.Z)\r\n            TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36), TargetVelv5.Velocity.Z)\r\n        end)\r\n    end\r\nend)\r\n\r\nif getgenv().Howl.Spin.Enabled == true then\r\n    \r\n    local Players = game:GetService(\"Players\")\r\n    local UserInputService = game:GetService(\"UserInputService\")\r\n    local RunService = game:GetService(\"RunService\")\r\n    local Camera = workspace.CurrentCamera\r\n    local Toggle = getgenv().Howl.Spin.Enabled\r\n    local RotationSpeed = getgenv().Howl.Spin.SpinSpeed\r\n    local Keybind = getgenv().Howl.Spin.Keybind\r\n    \r\n    local function OnKeyPress(Input, GameProcessedEvent)\r\n        if Input.KeyCode == Keybind and not GameProcessedEvent then \r\n            Toggle = not Toggle\r\n        end\r\n    end\r\n    \r\n    UserInputService.InputBegan:Connect(OnKeyPress)\r\n    \r\n    local LastRenderTime = 0\r\n    local TotalRotation = 0\r\n    \r\n    local function RotateCamera()\r\n        if Toggle then\r\n            local CurrentTime = tick()\r\n            local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)\r\n            LastRenderTime = CurrentTime\r\n    \r\n            local RotationAngle = RotationSpeed * TimeDelta\r\n            local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationAngle))\r\n            Camera.CFrame = Camera.CFrame * Rotation\r\n    \r\n            TotalRotation = TotalRotation + RotationAngle\r\n            if TotalRotation >= getgenv().Howl.Spin.Degrees then \r\n                Toggle = false\r\n                TotalRotation = 0\r\n            end\r\n        end\r\n    end\r\n    \r\n    RunService.RenderStepped:Connect(RotateCamera)\r\n    end\r\n\r\ngetgenv().Loaded = true -- end of the script\r\nelse\r\n    game:GetService(\"StarterGui\"):SetCore(\"SendNotification\", {\r\n        Title = \"Howl\",\r\n        Text = \"Updated Table\",\r\n        Duration = 0.001\r\n    })\r\nend\r\n"